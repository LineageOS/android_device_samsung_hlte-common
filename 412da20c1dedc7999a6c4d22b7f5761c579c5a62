{
  "comments": [
    {
      "key": {
        "uuid": "7ac969e8_2c8997cb",
        "filename": "ril/telephony/java/com/android/internal/telephony/hlteRIL.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 883
      },
      "writtenOn": "2015-03-12T14:09:58Z",
      "side": 1,
      "message": "Why is this static?",
      "revId": "412da20c1dedc7999a6c4d22b7f5761c579c5a62",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac969e8_ccba836e",
        "filename": "ril/telephony/java/com/android/internal/telephony/hlteRIL.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 6351
      },
      "writtenOn": "2015-03-12T14:15:24Z",
      "side": 1,
      "message": "Any reason that this needs a thread pool instead of just creating a thread each time RIL_UNSOL_AM comes in?  Given that we are creating a whole new process, it doesn\u0027t sound like a little thread adds that much overhead.",
      "revId": "412da20c1dedc7999a6c4d22b7f5761c579c5a62",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac969e8_ec6c9f0a",
        "filename": "ril/telephony/java/com/android/internal/telephony/hlteRIL.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 883
      },
      "writtenOn": "2015-03-12T14:46:52Z",
      "side": 1,
      "message": "I was just thinking that an hour ago but i thought he was trying to prevent a race condition.",
      "parentUuid": "7ac969e8_ccba836e",
      "revId": "412da20c1dedc7999a6c4d22b7f5761c579c5a62",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac969e8_8f035d0d",
        "filename": "ril/telephony/java/com/android/internal/telephony/hlteRIL.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 6351
      },
      "writtenOn": "2015-03-12T22:19:11Z",
      "side": 1,
      "message": "That was my first thought but isn\u0027t this constructor allowing 10 concurrent requests at the same time anyway?\n\nAnd, for the record, if we wanted to stop the race condition I would vote for doing it in a separate commit because it exists right now.  It would be easy enough to fix with a static mutex.",
      "parentUuid": "7ac969e8_ec6c9f0a",
      "revId": "412da20c1dedc7999a6c4d22b7f5761c579c5a62",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac969e8_6f1a6119",
        "filename": "ril/telephony/java/com/android/internal/telephony/hlteRIL.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 12866
      },
      "writtenOn": "2015-03-13T03:58:31Z",
      "side": 1,
      "message": "One problem in particular that I have on my phone is that the hlteRIL.processUnsolicited() function seems to be called repeatedly at a very rapid rate (especially when the phone tries to regain an LTE signal).  This can lead to many AM processes executing all at the same time, resulting in performance problems.  In the original CyanogenMod code, the file handles remain open upon exiting the hlteRIL.processUnsolicited() function, and this leads to a file descriptor leak and a bunch of IOExceptions due to the system running out of file descriptors.  (Based on what I saw in the article at http://bryanmarty.com/2012/01/22/process-leaking-file-descriptors/ , the garbage collector has no time to close the file descriptors automatically.  I was thinking of submitting another patch set based on the article\u0027s second solution, but I thought I\u0027d elicit your opinions on this matter.)  I\u0027m basically trying to prevent the following from appearing in the log (and prevent performance problems at the same time):\n\n02-25 04:46:46.659 W/System.err( 9916): java.io.IOException: Error running exec(). Command: [am, broadcast, -a, android.intent.action.LTE_SMS_STATUS, --ei, ltesms, 3] Working Directory: null Environment: null\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:211)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:173)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:246)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:189)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat com.android.internal.telephony.hlteRIL.processUnsolicited(hlteRIL.java:265)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat com.android.internal.telephony.RIL.processResponse(RIL.java:2607)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat com.android.internal.telephony.RIL$RILReceiver.run(RIL.java:602)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.Thread.run(Thread.java:818)\n\n02-25 04:46:46.659 W/System.err( 9916): Caused by: java.io.IOException: Too many open files\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.ProcessManager.exec(Native Method)\n\n02-25 04:46:46.659 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:209)\n\n02-25 04:46:46.659 W/System.err( 9916): \t... 7 more\n\n02-25 04:46:46.660 W/System.err( 9916): java.io.IOException: Error running \nexec(). Command: [am, broadcast, -a, android.intent.action.LTE_SMS_STATUS, --ei, ltesms, 3] Working Directory: null Environment: null\n\n02-25 04:46:46.660 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:211)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:173)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:246)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:189)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat com.android.internal.telephony.hlteRIL.processUnsolicited(hlteRIL.java:265)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat com.android.internal.telephony.RIL.processResponse(RIL.java:2607)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat com.android.internal.telephony.RIL$RILReceiver.run(RIL.java:602)\n\n02-25 04:46:46.660 W/System.err( 9916): \tat java.lang.Thread.run(Thread.java:818)\n\n02-25 04:46:46.660 W/System.err( 9916): Caused by: java.io.IOException: Too many open files\n\n02-25 04:46:46.661 W/System.err( 9916): \tat java.lang.ProcessManager.exec(Native Method)\n\n02-25 04:46:46.661 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:209)\n\n02-25 04:46:46.661 W/System.err( 9916): \t... 7 more\n\n02-25 04:46:46.661 W/System.err( 9916): java.io.IOException: Error running exec(). Command: [am, broadcast, -a, android.intent.action.LTE_SMS_STATUS, --ei, ltesms, 3] Working Directory: null Environment: null\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:211)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:173)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:246)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.Runtime.exec(Runtime.java:189)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat com.android.internal.telephony.hlteRIL.processUnsolicited(hlteRIL.java:265)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat com.android.internal.telephony.RIL.processResponse(RIL.java:2607)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat com.android.internal.telephony.RIL$RILReceiver.run(RIL.java:602)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.Thread.run(Thread.java:818)\n\n02-25 04:46:46.662 W/System.err( 9916): Caused by: java.io.IOException: Too many open files\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.ProcessManager.exec(Native Method)\n\n02-25 04:46:46.662 W/System.err( 9916): \tat java.lang.ProcessManager.exec(ProcessManager.java:209)\n\n02-25 04:46:46.662 W/System.err( 9916): \t... 7 more\n\n...",
      "parentUuid": "7ac969e8_8f035d0d",
      "revId": "412da20c1dedc7999a6c4d22b7f5761c579c5a62",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    }
  ]
}